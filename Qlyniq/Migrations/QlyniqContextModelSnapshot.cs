// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Qlyniq.Models;

namespace Qlyniq.Migrations
{
    [DbContext(typeof(QlyniqContext))]
    partial class QlyniqContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Qlyniq.Models.Appointments", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<uint>("DoctorId");

                    b.Property<string>("PatientFirstName")
                        .HasColumnType("varchar(255)");

                    b.Property<uint?>("PatientId");

                    b.Property<string>("PatientLastName")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("StartingTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId")
                        .HasName("FK_Appointments_DoctorId");

                    b.HasIndex("PatientId")
                        .HasName("FK_Appointments_PatientId");

                    b.ToTable("appointments");
                });

            modelBuilder.Entity("Qlyniq.Models.Deans", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<uint>("EmployeeId");

                    b.Property<uint>("OfficeId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .HasName("FK_Deans_EmployeeId");

                    b.HasIndex("OfficeId")
                        .HasName("FK_Deans_OfficeId");

                    b.ToTable("deans");
                });

            modelBuilder.Entity("Qlyniq.Models.Diagnosis", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4);

                    b.Property<string>("MedicalTerm")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("diagnosis");
                });

            modelBuilder.Entity("Qlyniq.Models.Employees", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("enum('Male','Female')");

                    b.Property<sbyte?>("IsMedicalWorker")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MedicalTitle")
                        .HasColumnType("varchar(50)");

                    b.Property<uint>("OfficeId");

                    b.Property<string>("SocialSecurityNumber")
                        .IsRequired()
                        .HasColumnType("varchar(13)")
                        .HasMaxLength(13);

                    b.HasKey("Id");

                    b.HasIndex("OfficeId")
                        .HasName("FK_Employees_OfficeId");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("Qlyniq.Models.Examinations", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<uint?>("DiagnosisId")
                        .IsRequired();

                    b.Property<uint>("DoctorId");

                    b.Property<uint>("FileId");

                    b.Property<sbyte?>("IsEmergency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint?>("LabReportId");

                    b.Property<uint>("PatientId");

                    b.Property<DateTime>("StartingTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Therapy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(500)")
                        .HasDefaultValueSql("'Nihil'");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisId")
                        .HasName("FK_Examinations_DiagnosisId");

                    b.HasIndex("DoctorId")
                        .HasName("FK_Examinations_DoctorId");

                    b.HasIndex("FileId")
                        .HasName("FK_Examinations_FileId");

                    b.HasIndex("LabReportId")
                        .HasName("FK_Examinations_LabReportId");

                    b.HasIndex("PatientId")
                        .HasName("FK_Examinations_PatientId");

                    b.ToTable("examinations");
                });

            modelBuilder.Entity("Qlyniq.Models.Files", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<uint>("CreatorId");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<uint>("PatientId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId")
                        .HasName("FK_Files_CreatorId");

                    b.HasIndex("PatientId")
                        .HasName("FK_Files_PatientId");

                    b.ToTable("files");
                });

            modelBuilder.Entity("Qlyniq.Models.Labreports", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AcceptedTime")
                        .HasColumnType("datetime");

                    b.Property<float>("Cholesterol");

                    b.Property<float>("Creatine");

                    b.Property<float>("Glucose");

                    b.Property<sbyte?>("Helicobacter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("PatientId");

                    b.Property<uint>("RecipientId");

                    b.Property<DateTime>("SampledTime")
                        .HasColumnType("datetime");

                    b.Property<float>("Urea");

                    b.HasKey("Id");

                    b.HasIndex("PatientId")
                        .HasName("FK_LabResults_PatientId");

                    b.HasIndex("RecipientId")
                        .HasName("FK_LabResults_RecipientId");

                    b.ToTable("labreports");
                });

            modelBuilder.Entity("Qlyniq.Models.Offices", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Budget")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,0)")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("DeanId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DeanId")
                        .HasName("FK_Offices_DeanId");

                    b.ToTable("offices");
                });

            modelBuilder.Entity("Qlyniq.Models.Patients", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("enum('Male','Female')");

                    b.Property<string>("HealthCareProvider")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SocialSecurityNumber")
                        .IsRequired()
                        .HasColumnType("varchar(13)")
                        .HasMaxLength(13);

                    b.HasKey("Id");

                    b.ToTable("patients");
                });

            modelBuilder.Entity("Qlyniq.Models.Appointments", b =>
                {
                    b.HasOne("Qlyniq.Models.Employees", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("FK_Appointments_DoctorId");

                    b.HasOne("Qlyniq.Models.Patients", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_Appointments_PatientId");
                });

            modelBuilder.Entity("Qlyniq.Models.Deans", b =>
                {
                    b.HasOne("Qlyniq.Models.Employees", "Employee")
                        .WithMany("Deans")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_Deans_EmployeeId");

                    b.HasOne("Qlyniq.Models.Offices", "Office")
                        .WithMany("Deans")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("FK_Deans_OfficeId");
                });

            modelBuilder.Entity("Qlyniq.Models.Employees", b =>
                {
                    b.HasOne("Qlyniq.Models.Offices", "Office")
                        .WithMany("Employees")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("FK_Employees_OfficeId");
                });

            modelBuilder.Entity("Qlyniq.Models.Examinations", b =>
                {
                    b.HasOne("Qlyniq.Models.Diagnosis", "Diagnosis")
                        .WithMany("Examinations")
                        .HasForeignKey("DiagnosisId")
                        .HasConstraintName("FK_Examinations_DiagnosisId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Qlyniq.Models.Employees", "Doctor")
                        .WithMany("Examinations")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("FK_Examinations_DoctorId");

                    b.HasOne("Qlyniq.Models.Files", "File")
                        .WithMany("Examinations")
                        .HasForeignKey("FileId")
                        .HasConstraintName("FK_Examinations_FileId");

                    b.HasOne("Qlyniq.Models.Labreports", "LabReport")
                        .WithMany("Examinations")
                        .HasForeignKey("LabReportId")
                        .HasConstraintName("FK_Examinations_LabReportId");

                    b.HasOne("Qlyniq.Models.Patients", "Patient")
                        .WithMany("Examinations")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_Examinations_PatientId");
                });

            modelBuilder.Entity("Qlyniq.Models.Files", b =>
                {
                    b.HasOne("Qlyniq.Models.Employees", "Creator")
                        .WithMany("Files")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_Files_CreatorId");

                    b.HasOne("Qlyniq.Models.Patients", "Patient")
                        .WithMany("Files")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_Files_PatientId");
                });

            modelBuilder.Entity("Qlyniq.Models.Labreports", b =>
                {
                    b.HasOne("Qlyniq.Models.Patients", "Patient")
                        .WithMany("Labreports")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_LabResults_PatientId");

                    b.HasOne("Qlyniq.Models.Employees", "Recipient")
                        .WithMany("Labreports")
                        .HasForeignKey("RecipientId")
                        .HasConstraintName("FK_LabResults_RecipientId");
                });

            modelBuilder.Entity("Qlyniq.Models.Offices", b =>
                {
                    b.HasOne("Qlyniq.Models.Deans", "Dean")
                        .WithMany("Offices")
                        .HasForeignKey("DeanId")
                        .HasConstraintName("FK_Offices_DeanId");
                });
#pragma warning restore 612, 618
        }
    }
}
